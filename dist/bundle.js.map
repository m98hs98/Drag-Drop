{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://ma/./Src/components/base-component.ts","webpack://ma/./Src/util/validation.ts","webpack://ma/./Src/decorators/autobind.ts","webpack://ma/./Src/models/project.ts","webpack://ma/./Src/state/project-state.ts","webpack://ma/./Src/components/project-input.ts","webpack://ma/./Src/components/project-item.ts","webpack://ma/./Src/components/project-list.ts","webpack://ma/./Src/app.ts"],"sourcesContent":["\n// Component Base Class\nexport default abstract class Component<T extends HTMLElement, U extends HTMLElement> {\n    templateElement: HTMLTemplateElement;\n    hostElement: T;\n    element: U;\n\n    constructor(\n        templateId: string,\n        hostElementId: string,\n        insertAtStart: boolean,\n        newElementId?: string\n    ) {\n        this.templateElement = document.getElementById(\n            templateId\n        )! as HTMLTemplateElement;\n        this.hostElement = document.getElementById(hostElementId)! as T;\n\n        const importedNode = document.importNode(\n            this.templateElement.content,\n            true\n        );\n        this.element = importedNode.firstElementChild as U;\n        if (newElementId) {\n            this.element.id = newElementId;\n        }\n\n        this.attach(insertAtStart);\n    }\n\n    private attach(insertAtBeginning: boolean) {\n        this.hostElement.insertAdjacentElement(\n            insertAtBeginning ? 'afterbegin' : 'beforeend',\n            this.element\n        );\n    }\n\n    abstract configure(): void;\n    abstract renderContent(): void;\n}","\n//Validation\nexport interface Validatable {\n    value: string | number;\n    required?: boolean;\n    minLength?: number;\n    maxLength?: number;\n    min?: number;\n    max?: number;\n}\n\nexport function validate(validatableInput: Validatable) {\n    let isValid = true;\n    if (validatableInput.required) {\n        isValid = isValid && validatableInput.value.toString().trim().length !== 0;\n    }\n    if (\n        validatableInput.minLength != null &&\n        typeof validatableInput.value === 'string'\n    ) {\n        isValid = isValid && validatableInput.value.length >= validatableInput.minLength;\n    }\n    if (\n        validatableInput.maxLength != null &&\n        typeof validatableInput.value === 'string'\n    ) {\n        isValid = isValid && validatableInput.value.length <= validatableInput.maxLength;\n    }\n    if (validatableInput.min != null && typeof validatableInput.value === 'number') {\n        isValid = isValid && validatableInput.value >= validatableInput.min;\n    }\n    if (validatableInput.max != null && typeof validatableInput.value === 'number') {\n        isValid = isValid && validatableInput.value <= validatableInput.max;\n    }\n    return isValid;\n}","\n// autobind decorator\nexport function autobind(\n    _: any,\n    _2: string,\n    descriptor: PropertyDescriptor\n) {\n    const originalMethod = descriptor.value;\n    const adjDescriptor: PropertyDescriptor = {\n        configurable: true,\n        get() {\n            const boundFn = originalMethod.bind(this);\n            return boundFn;\n        }\n    };\n    return adjDescriptor;\n}\n","\n    export enum ProjectStatus {\n        Active,\n        Finished\n    }\n    \n    export class Project {\n        constructor(\n            public id: string,\n            public title: string,\n            public description: string,\n            public people: number,\n            public status: ProjectStatus\n            ) {}\n    }\n","import { Project, ProjectStatus } from \"../models/project\";\n\n\n// Project State Management\ntype Listener<T> = (items: T[]) => void;\n\nclass State<T> {\n    protected listeners: Listener<T>[] = [];\n    \n    addListener(listenerFn: Listener<T>) {\n        this.listeners.push(listenerFn);\n    }\n}\n    \nexport class ProjectState extends State<Project> {\n    private projects: Project[] = [];\n    private static instance: ProjectState;\n    \n    private constructor() {\n        super();\n    }\n    \n    static getInstance() {\n        if (this.instance) {\n            return this.instance;\n        }\n        this.instance = new ProjectState();\n        return this.instance;\n    }\n    \n    addProject(title: string, description: string, numOfPeople: number) {\n        const newProject = new Project(\n            Math.random().toString(),\n            title,\n            description,\n            numOfPeople,\n            ProjectStatus.Active\n        );\n        this.projects.push(newProject);\n        this.updateListeners();\n    }\n    \n    moveProject(projectId: string, newStatus: ProjectStatus) {\n        const project = this.projects.find(prj => prj.id === projectId);\n        if (project && project.status !== newStatus) {\n            project.status = newStatus;\n            this.updateListeners();\n        }\n    }\n    \n    private updateListeners() {\n        for (const listenerFn of this.listeners) {\n            listenerFn(this.projects.slice());\n        }\n    }\n}\n    \nexport const projectState = ProjectState.getInstance();","import Cmp from \"./base-component\";\nimport * as Validation from \"../util/validation\";\nimport { autobind } from \"../decorators/autobind\";\nimport { projectState } from \"../state/project-state\";\n\n\n// ProjectInput Class\nexport class ProjectInput extends Cmp<HTMLDivElement, HTMLFormElement> {\n    titleInputElement: HTMLInputElement;\n    descriptionInputElement: HTMLInputElement;\n    peopleInputElement: HTMLInputElement;\n\n\n    constructor() {\n        super('project-input', 'app', true, 'user-input');\n        this.titleInputElement = this.element.querySelector(\n            '#title'\n        ) as HTMLInputElement;\n        this.descriptionInputElement = this.element.querySelector(\n            '#description'\n        ) as HTMLInputElement;\n        this.peopleInputElement = this.element.querySelector(\n            '#people'\n        ) as HTMLInputElement;\n\n        this.configure();\n    }\n\n    configure() {\n        this.element.addEventListener('submit', this.submitHandler);\n    }\n\n    renderContent(): void {}\n\n    private gatherUserInput(): [string, string, number] | void {\n        const enteredTitle = this.titleInputElement.value;\n        const enteredDescription = this.descriptionInputElement.value;\n        const enteredPeople = this.peopleInputElement.value;\n\n        const titleValidatable: Validation.Validatable = {\n            value: enteredTitle,\n            required: true\n        };\n        const descriptionValidatable: Validation.Validatable = {\n            value: enteredDescription,\n            required: true,\n            minLength: 5\n        };\n        const peopleValidatable: Validation.Validatable = {\n            value: enteredPeople,\n            required: true,\n            min: 1,\n            max: 10,\n        };\n\n        if (\n            !Validation.validate(titleValidatable) ||\n            !Validation.validate(descriptionValidatable) ||\n            !Validation.validate(peopleValidatable)\n        ) {\n            alert('Invalid input, please try again!');\n            return;\n        } else {\n            return [enteredTitle, enteredDescription, +enteredPeople];\n        }\n    }\n\n    private clearInputs() {\n        this.titleInputElement.value = '';\n        this.descriptionInputElement.value = '';\n        this.peopleInputElement.value = '';\n    }\n\n\n    @autobind\n    private submitHandler(event: Event) {\n        event.preventDefault();\n        const userInput = this.gatherUserInput();\n        if (Array.isArray(userInput)) {\n            const [title, desc, people] = userInput;\n            projectState.addProject(title, desc, people);\n            this.clearInputs();\n        }\n    }\n}","import { Draggable } from \"../models/drag-drop\";\nimport Component from \"./base-component\";\nimport { Project } from \"../models/project\";\nimport { autobind } from \"../decorators/autobind\";\n\n\n// ProjectItem Class\nexport class ProjectItem extends Component<HTMLUListElement, HTMLLIElement>\n    implements Draggable {\n    private project: Project;\n\n    get persons() {\n        if (this.project.people === 1) {\n            return '1 person';\n        } else {\n            return `${this.project.people} persons`;\n        }\n    }\n\n    constructor(hostId: string, project: Project) {\n        super('single-project', hostId, false, project.id);\n        this.project = project;\n\n        this.configure();\n        this.renderContent();\n    }\n\n    @autobind\n    dragStartHandler(event: DragEvent) {\n        event.dataTransfer!.setData('text/plain', this.project.id);\n        event.dataTransfer!.effectAllowed = 'move';\n    }\n\n    dragEndHandler(_: DragEvent) {\n        console.log('DragEnd');\n    }\n\n    configure() {\n        this.element.addEventListener('dragstart', this.dragStartHandler);\n        this.element.addEventListener('dragend', this.dragEndHandler);\n    }\n\n    renderContent() {\n        this.element.querySelector('h2')!.textContent = this.project.title;\n        this.element.querySelector(\n            'h3'\n        )!.textContent = this.persons + ' assigned';\n        this.element.querySelector('p')!.textContent = this.project.description;\n    }\n}","import { DragTarget } from \"../models/drag-drop\";\nimport Component from \"./base-component\";\nimport { Project, ProjectStatus } from \"../models/project\";\nimport { autobind } from \"../decorators/autobind\";\nimport { projectState } from \"../state/project-state\";\nimport { ProjectItem } from \"./project-item\";\n\n\n// ProjectList class\nexport class ProjectList extends Component<HTMLDivElement, HTMLElement>\n    implements DragTarget {\n    assignedProjects: Project[];\n\n    constructor(private type: 'active' | 'finished') {\n        super('project-list', 'app', false, `${type}-projects`);\n        this.assignedProjects = [];\n\n        this.configure();\n        this.renderContent();\n    }\n\n    @autobind\n    dragOverHandler(event: DragEvent) {\n        if (event.dataTransfer && event.dataTransfer.types[0] === 'text/plain') {\n            event.preventDefault();\n            const listEl = this.element.querySelector('ul')!;\n            listEl.classList.add('droppable');\n        } \n    }\n\n    @autobind\n    dropHandler(event: DragEvent) {\n        const prjId = event.dataTransfer!.getData('text/plain');\n        projectState.moveProject(\n            prjId,\n            this.type === 'active' ? ProjectStatus.Active : ProjectStatus.Finished\n        );\n    }\n\n    @autobind\n    dragLeaveHandler(_: DragEvent) {\n        const listEl = this.element.querySelector('ul')!;\n        listEl.classList.remove('droppable');\n    }\n\n    configure() {\n        this.element.addEventListener('dragover', this.dragOverHandler);\n        this.element.addEventListener('dragleave', this.dragLeaveHandler);\n        this.element.addEventListener('drop', this.dropHandler);\n        projectState.addListener((projects: Project[]) => {\n            const relevantProjects = projects.filter(prj => {\n                if (this.type === 'active') {\n                    return prj.status === ProjectStatus.Active;\n                }\n                return prj.status === ProjectStatus.Finished;\n            });\n            this.assignedProjects = relevantProjects;\n            this.renderProjects();\n        });\n    }\n\n    renderContent() {\n        const listId =  `${this.type}-projects-list`;\n        this.element.querySelector('ul')!.id = listId;\n        this.element.querySelector('h2')!.textContent = \n            this.type.toUpperCase() + 'PROJECT';\n    }\n\n    private renderProjects() {\n        const listEl = document.getElementById(\n            `${this.type}-projects-list`\n        )! as HTMLUListElement;\n        listEl.innerHTML = '';\n        for (const prjItem of this.assignedProjects) {\n        new ProjectItem(this.element.querySelector('ul')!.id, prjItem);\n        }\n       }\n}","import { ProjectInput } from \"./components/project-input\";\nimport { ProjectList } from \"./components/project-list\";\n\nnew ProjectInput();\nnew ProjectList('active');\nnew ProjectList('finished');\n"],"names":["Component","constructor","templateId","hostElementId","insertAtStart","newElementId","this","templateElement","document","getElementById","hostElement","importedNode","importNode","content","element","firstElementChild","id","attach","insertAtBeginning","insertAdjacentElement","validate","validatableInput","isValid","required","value","toString","trim","length","minLength","maxLength","min","max","autobind","_","_2","descriptor","originalMethod","configurable","get","bind","ProjectStatus","Project","title","description","people","status","State","listeners","addListener","listenerFn","push","ProjectState","super","projects","static","instance","addProject","numOfPeople","newProject","Math","random","Active","updateListeners","moveProject","projectId","newStatus","project","find","prj","slice","projectState","getInstance","ProjectInput","titleInputElement","querySelector","descriptionInputElement","peopleInputElement","configure","addEventListener","submitHandler","renderContent","gatherUserInput","enteredTitle","enteredDescription","enteredPeople","descriptionValidatable","peopleValidatable","alert","clearInputs","event","preventDefault","userInput","Array","isArray","desc","ProjectItem","persons","hostId","dragStartHandler","dataTransfer","setData","effectAllowed","dragEndHandler","console","log","textContent","ProjectList","type","assignedProjects","dragOverHandler","types","classList","add","dropHandler","prjId","getData","Finished","dragLeaveHandler","remove","relevantProjects","filter","renderProjects","listId","toUpperCase","innerHTML","prjItem"],"sourceRoot":""}